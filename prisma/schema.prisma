datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    contracts Contract[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Risks     Risk[]
    Messages  Message[]
    // Embedding Embedding[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Contract {
    id          String    @id @default(uuid())
    title       String
    filePath    String
    rawText     String
    extractedAt DateTime?
    status      String    @default("pending")

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    risks    Risk[]
    messages Message[]
    // embeddings Embedding[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Embedding {
    id String @id @default(dbgenerated("gen_random_uuid()"))
    // contractId String
    // contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
    // userId     String
    // user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    text String

    embedding Unsupported("vector")
    metadata  Json?

    createdAt DateTime @default(now())

    // @@index([contractId])
}

model Risk {
    id            String   @id @default(uuid())
    userId        String
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    contractId    String
    contract      Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
    type          String
    severity      String
    deadline      DateTime
    clauseRefPage Int
    confidence    Int
    createdAt     DateTime @default(now())
}

model Message {
    id         String   @id @default(uuid())
    userId     String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    contractId String
    contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
    content    String
    role       String
    createdAt  DateTime @default(now())
}
